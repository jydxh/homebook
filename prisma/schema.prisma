// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

//  npx prisma migrate dev --name init
//  npx prisma studio

// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "mysql"
//   url      = env("DATABASE_MYSQL_URL")
//   // directUrl         = env("DIRECT_URL")
// }


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Property {
  id          String              @id @default(uuid())
  name        String
  tagline     String
  category    Category            @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  categoryId  String
  image       PropertyImages[]
  country     String
  description String              @db.VarChar(500)
  price       Int
  guests      Int
  bedrooms    Int
  baths       Int
  address     String
  latLng      String
  amenities   PropertyAmenities[] // Optional when creating the property
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  user        User                @relation(fields: [userId], references: [clerkId], onDelete: Cascade)
  userId      String
  favorites   Favorite[]
  orders      Order[]
  reviews     Review[]
  //  PropertyAmenities PropertyAmenities[]
}

model PropertyAmenities {
  propertyId  String
  amenitiesId String
  property    Property  @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  amenities   Amenities @relation(fields: [amenitiesId], references: [id], onDelete: Cascade)

  @@id([propertyId, amenitiesId])
}

model PropertyImages {
  id         String   @id @default(uuid())
  propertyId String
  imageUrl   String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  VENDOR
  ADMIN
}

model User {
  id            Int             @id @default(autoincrement())
  clerkId       String          @unique
  property      Property[] // one - to -many
  favorite      Favorite[] // one to many
  firstName     String
  lastName      String
  userName      String
  email         String
  country       String?
  city          String?
  state         String?
  profileImage  String?
  createAt      DateTime        @default(now())
  updateAt      DateTime        @updatedAt
  role          Role            @default(USER)
  orders        Order[]
  reviews       Review[]
  vendorProfile VendorProfile[]
}

enum ApplicationStatus {
  PENDING
  DENY
  APPROVED
  CANCELLED
}

//  this table will also be used to save the vendor application form, and admin will see these info on the page, and decide to approve
model VendorProfile {
  id                String            @id @default(uuid())
  user              User              @relation(fields: [userId], references: [clerkId], onDelete: Cascade)
  userId            String
  businessName      String
  businessAddress   String
  governmentId      String
  proofOfAddress    String
  acceptTerm        Boolean           @default(true)
  applicationStatus ApplicationStatus @default(PENDING)
  adminComment      String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

model Category {
  id         String     @id @default(uuid())
  name       String
  properties Property[]
}

model Amenities {
  id         String              @id @default(uuid())
  name       String
  properties PropertyAmenities[] // many to many
  //  PropertyAmenities PropertyAmenities[]
}

model Favorite {
  id         String   @id @default(uuid())
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId String
  user       User     @relation(fields: [userId], references: [clerkId], onDelete: Cascade)
  userId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum OrderStatus {
  CHECKED
  CANCELED
  PENDING
}


model Order {
  id            String   @id @default(uuid())
  user          User     @relation(fields: [userId], references: [clerkId], onDelete: Cascade)
  userId        String
  property      Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId    String
  orderTotal    Int
  totalNight    Int
  checkIn       DateTime
  checkOut      DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  paymentStatus Boolean  @default(false)
  orderStatus   OrderStatus @default(PENDING)
}

model Review {
  id         String   @id @default(uuid())
  rating     Int
  comment    String   @db.VarChar(400)
  createAt   DateTime @default(now())
  updateAt   DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [clerkId], onDelete: Cascade) // it tells the relation between user and review, the fields point to the review->userId, and the reference point to User->clerkId, so the review.userId will be connected a relation to the User->clerkId, the onDelete Cascade: if user is deleted, all associate reviews will also be deleted
  userId     String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId String
}
